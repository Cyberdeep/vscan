/* Copyright (c) 2011 Akamai Technologies, Inc. */

#include "system.hh"

#include "encode.h"

encode::encode(const StringPiece& sp) : sp(sp) {}

static const char uri_hex[][4] = {
{"%00"}, {"%01"}, {"%02"}, {"%03"}, {"%04"}, {"%05"}, {"%06"}, {"%07"},
{"%08"}, {"%09"}, {"%0A"}, {"%0B"}, {"%0C"}, {"%0D"}, {"%0E"}, {"%0F"},
{"%10"}, {"%11"}, {"%12"}, {"%13"}, {"%14"}, {"%15"}, {"%16"}, {"%17"},
{"%18"}, {"%19"}, {"%1A"}, {"%1B"}, {"%1C"}, {"%1D"}, {"%1E"}, {"%1F"},
{"%20"}, {"%21"}, {"%22"}, {"%23"}, {"%24"}, {"%25"}, {"%26"}, {"%27"},
{"%28"}, {"%29"}, {"%2A"}, {"%2B"}, {"%2C"}, {"%2D"}, {"%2E"}, {"%2F"},
{"%30"}, {"%31"}, {"%32"}, {"%33"}, {"%34"}, {"%35"}, {"%36"}, {"%37"},
{"%38"}, {"%39"}, {"%3A"}, {"%3B"}, {"%3C"}, {"%3D"}, {"%3E"}, {"%3F"},
{"%40"}, {"%41"}, {"%42"}, {"%43"}, {"%44"}, {"%45"}, {"%46"}, {"%47"},
{"%48"}, {"%49"}, {"%4A"}, {"%4B"}, {"%4C"}, {"%4D"}, {"%4E"}, {"%4F"},
{"%50"}, {"%51"}, {"%52"}, {"%53"}, {"%54"}, {"%55"}, {"%56"}, {"%57"},
{"%58"}, {"%59"}, {"%5A"}, {"%5B"}, {"%5C"}, {"%5D"}, {"%5E"}, {"%5F"},
{"%60"}, {"%61"}, {"%62"}, {"%63"}, {"%64"}, {"%65"}, {"%66"}, {"%67"},
{"%68"}, {"%69"}, {"%6A"}, {"%6B"}, {"%6C"}, {"%6D"}, {"%6E"}, {"%6F"},
{"%70"}, {"%71"}, {"%72"}, {"%73"}, {"%74"}, {"%75"}, {"%76"}, {"%77"},
{"%78"}, {"%79"}, {"%7A"}, {"%7B"}, {"%7C"}, {"%7D"}, {"%7E"}, {"%7F"},
{"%80"}, {"%81"}, {"%82"}, {"%83"}, {"%84"}, {"%85"}, {"%86"}, {"%87"},
{"%88"}, {"%89"}, {"%8A"}, {"%8B"}, {"%8C"}, {"%8D"}, {"%8E"}, {"%8F"},
{"%90"}, {"%91"}, {"%92"}, {"%93"}, {"%94"}, {"%95"}, {"%96"}, {"%97"},
{"%98"}, {"%99"}, {"%9A"}, {"%9B"}, {"%9C"}, {"%9D"}, {"%9E"}, {"%9F"},
{"%A0"}, {"%A1"}, {"%A2"}, {"%A3"}, {"%A4"}, {"%A5"}, {"%A6"}, {"%A7"},
{"%A8"}, {"%A9"}, {"%AA"}, {"%AB"}, {"%AC"}, {"%AD"}, {"%AE"}, {"%AF"},
{"%B0"}, {"%B1"}, {"%B2"}, {"%B3"}, {"%B4"}, {"%B5"}, {"%B6"}, {"%B7"},
{"%B8"}, {"%B9"}, {"%BA"}, {"%BB"}, {"%BC"}, {"%BD"}, {"%BE"}, {"%BF"},
{"%C0"}, {"%C1"}, {"%C2"}, {"%C3"}, {"%C4"}, {"%C5"}, {"%C6"}, {"%C7"},
{"%C8"}, {"%C9"}, {"%CA"}, {"%CB"}, {"%CC"}, {"%CD"}, {"%CE"}, {"%CF"},
{"%D0"}, {"%D1"}, {"%D2"}, {"%D3"}, {"%D4"}, {"%D5"}, {"%D6"}, {"%D7"},
{"%D8"}, {"%D9"}, {"%DA"}, {"%DB"}, {"%DC"}, {"%DD"}, {"%DE"}, {"%DF"},
{"%E0"}, {"%E1"}, {"%E2"}, {"%E3"}, {"%E4"}, {"%E5"}, {"%E6"}, {"%E7"},
{"%E8"}, {"%E9"}, {"%EA"}, {"%EB"}, {"%EC"}, {"%ED"}, {"%EE"}, {"%EF"},
{"%F0"}, {"%F1"}, {"%F2"}, {"%F3"}, {"%F4"}, {"%F5"}, {"%F6"}, {"%F7"},
{"%F8"}, {"%F9"}, {"%FA"}, {"%FB"}, {"%FC"}, {"%FD"}, {"%FE"}, {"%FF"}};

uri_encode::uri_encode(const StringPiece& sp) : encode(sp) {}

ostream& operator <<(ostream& os, const uri_encode& b)
{
	for (StringPiece::const_iterator it = b.sp.begin(); it != b.sp.end(); ++it)
	{
		char c = *it;
		if ((c <= 'z' && c >= 'a') ||
		    (c <= 'Z' && c >= 'A') ||
		    (c <= '9' && c >= '0') ||
		    (c == '/'))
			os << c;
		else
			os << uri_hex[(unsigned char)c];
	}
	return os;
}

static const char html_hex[][7] = {
{"&#x00;"}, {"&#x01;"}, {"&#x02;"}, {"&#x03;"}, {"&#x04;"}, {"&#x05;"}, {"&#x06;"}, {"&#x07;"},
{"&#x08;"}, {"&#x09;"}, {"&#x0A;"}, {"&#x0B;"}, {"&#x0C;"}, {"&#x0D;"}, {"&#x0E;"}, {"&#x0F;"},
{"&#x10;"}, {"&#x11;"}, {"&#x12;"}, {"&#x13;"}, {"&#x14;"}, {"&#x15;"}, {"&#x16;"}, {"&#x17;"},
{"&#x18;"}, {"&#x19;"}, {"&#x1A;"}, {"&#x1B;"}, {"&#x1C;"}, {"&#x1D;"}, {"&#x1E;"}, {"&#x1F;"},
{"&#x20;"}, {"&#x21;"}, {"&#x22;"}, {"&#x23;"}, {"&#x24;"}, {"&#x25;"}, {"&#x26;"}, {"&#x27;"},
{"&#x28;"}, {"&#x29;"}, {"&#x2A;"}, {"&#x2B;"}, {"&#x2C;"}, {"&#x2D;"}, {"&#x2E;"}, {"&#x2F;"},
{"&#x30;"}, {"&#x31;"}, {"&#x32;"}, {"&#x33;"}, {"&#x34;"}, {"&#x35;"}, {"&#x36;"}, {"&#x37;"},
{"&#x38;"}, {"&#x39;"}, {"&#x3A;"}, {"&#x3B;"}, {"&#x3C;"}, {"&#x3D;"}, {"&#x3E;"}, {"&#x3F;"},
{"&#x40;"}, {"&#x41;"}, {"&#x42;"}, {"&#x43;"}, {"&#x44;"}, {"&#x45;"}, {"&#x46;"}, {"&#x47;"},
{"&#x48;"}, {"&#x49;"}, {"&#x4A;"}, {"&#x4B;"}, {"&#x4C;"}, {"&#x4D;"}, {"&#x4E;"}, {"&#x4F;"},
{"&#x50;"}, {"&#x51;"}, {"&#x52;"}, {"&#x53;"}, {"&#x54;"}, {"&#x55;"}, {"&#x56;"}, {"&#x57;"},
{"&#x58;"}, {"&#x59;"}, {"&#x5A;"}, {"&#x5B;"}, {"&#x5C;"}, {"&#x5D;"}, {"&#x5E;"}, {"&#x5F;"},
{"&#x60;"}, {"&#x61;"}, {"&#x62;"}, {"&#x63;"}, {"&#x64;"}, {"&#x65;"}, {"&#x66;"}, {"&#x67;"},
{"&#x68;"}, {"&#x69;"}, {"&#x6A;"}, {"&#x6B;"}, {"&#x6C;"}, {"&#x6D;"}, {"&#x6E;"}, {"&#x6F;"},
{"&#x70;"}, {"&#x71;"}, {"&#x72;"}, {"&#x73;"}, {"&#x74;"}, {"&#x75;"}, {"&#x76;"}, {"&#x77;"},
{"&#x78;"}, {"&#x79;"}, {"&#x7A;"}, {"&#x7B;"}, {"&#x7C;"}, {"&#x7D;"}, {"&#x7E;"}, {"&#x7F;"},
{"&#x80;"}, {"&#x81;"}, {"&#x82;"}, {"&#x83;"}, {"&#x84;"}, {"&#x85;"}, {"&#x86;"}, {"&#x87;"},
{"&#x88;"}, {"&#x89;"}, {"&#x8A;"}, {"&#x8B;"}, {"&#x8C;"}, {"&#x8D;"}, {"&#x8E;"}, {"&#x8F;"},
{"&#x90;"}, {"&#x91;"}, {"&#x92;"}, {"&#x93;"}, {"&#x94;"}, {"&#x95;"}, {"&#x96;"}, {"&#x97;"},
{"&#x98;"}, {"&#x99;"}, {"&#x9A;"}, {"&#x9B;"}, {"&#x9C;"}, {"&#x9D;"}, {"&#x9E;"}, {"&#x9F;"},
{"&#xA0;"}, {"&#xA1;"}, {"&#xA2;"}, {"&#xA3;"}, {"&#xA4;"}, {"&#xA5;"}, {"&#xA6;"}, {"&#xA7;"},
{"&#xA8;"}, {"&#xA9;"}, {"&#xAA;"}, {"&#xAB;"}, {"&#xAC;"}, {"&#xAD;"}, {"&#xAE;"}, {"&#xAF;"},
{"&#xB0;"}, {"&#xB1;"}, {"&#xB2;"}, {"&#xB3;"}, {"&#xB4;"}, {"&#xB5;"}, {"&#xB6;"}, {"&#xB7;"},
{"&#xB8;"}, {"&#xB9;"}, {"&#xBA;"}, {"&#xBB;"}, {"&#xBC;"}, {"&#xBD;"}, {"&#xBE;"}, {"&#xBF;"},
{"&#xC0;"}, {"&#xC1;"}, {"&#xC2;"}, {"&#xC3;"}, {"&#xC4;"}, {"&#xC5;"}, {"&#xC6;"}, {"&#xC7;"},
{"&#xC8;"}, {"&#xC9;"}, {"&#xCA;"}, {"&#xCB;"}, {"&#xCC;"}, {"&#xCD;"}, {"&#xCE;"}, {"&#xCF;"},
{"&#xD0;"}, {"&#xD1;"}, {"&#xD2;"}, {"&#xD3;"}, {"&#xD4;"}, {"&#xD5;"}, {"&#xD6;"}, {"&#xD7;"},
{"&#xD8;"}, {"&#xD9;"}, {"&#xDA;"}, {"&#xDB;"}, {"&#xDC;"}, {"&#xDD;"}, {"&#xDE;"}, {"&#xDF;"},
{"&#xE0;"}, {"&#xE1;"}, {"&#xE2;"}, {"&#xE3;"}, {"&#xE4;"}, {"&#xE5;"}, {"&#xE6;"}, {"&#xE7;"},
{"&#xE8;"}, {"&#xE9;"}, {"&#xEA;"}, {"&#xEB;"}, {"&#xEC;"}, {"&#xED;"}, {"&#xEE;"}, {"&#xEF;"},
{"&#xF0;"}, {"&#xF1;"}, {"&#xF2;"}, {"&#xF3;"}, {"&#xF4;"}, {"&#xF5;"}, {"&#xF6;"}, {"&#xF7;"},
{"&#xF8;"}, {"&#xF9;"}, {"&#xFA;"}, {"&#xFB;"}, {"&#xFC;"}, {"&#xFD;"}, {"&#xFE;"}, {"&#xFF;"}};

html_encode::html_encode(const StringPiece& sp) : encode(sp) {}

ostream& operator <<(ostream& os, const html_encode& b)
{
	for (StringPiece::const_iterator it = b.sp.begin(); it != b.sp.end(); ++it)
	{
		char c = *it;
		if (c == '<' || c == '&' || c == '=' || c == '"' || \
			c == '\n' || c == '\r' || c == ' ' || c == '(' || c == ')')
			os << html_hex[(unsigned char)c];
		else
			os << c;
	}
	return os;
}

highlight_encode::highlight_encode(const StringPiece& sp) : encode(sp) {}

ostream& operator <<(ostream& os, const highlight_encode& b)
{
	for (StringPiece::const_iterator it = b.sp.begin(); it != b.sp.end(); ++it)
	{
		char c = *it;
		if ( c == '`' || c == '~' )
			os << html_hex[(unsigned char)c];
		else
			os << c;
	}
	return os;
}
